[{"/Users/pleed0215/Documents/mystudy/nwitter/src/index.tsx":"1","/Users/pleed0215/Documents/mystudy/nwitter/src/components/App.tsx":"2","/Users/pleed0215/Documents/mystudy/nwitter/src/firebase.app.ts":"3","/Users/pleed0215/Documents/mystudy/nwitter/src/components/Router.tsx":"4","/Users/pleed0215/Documents/mystudy/nwitter/src/components/Navigation.tsx":"5","/Users/pleed0215/Documents/mystudy/nwitter/src/routes/auth.tsx":"6","/Users/pleed0215/Documents/mystudy/nwitter/src/routes/home.tsx":"7","/Users/pleed0215/Documents/mystudy/nwitter/src/routes/profile.tsx":"8","/Users/pleed0215/Documents/mystudy/nwitter/src/components/Nweet.tsx":"9"},{"size":254,"mtime":1609655514236,"results":"10","hashOfConfig":"11"},{"size":1167,"mtime":1609736963478,"results":"12","hashOfConfig":"11"},{"size":710,"mtime":1609717077481,"results":"13","hashOfConfig":"11"},{"size":1367,"mtime":1609738130047,"results":"14","hashOfConfig":"11"},{"size":1344,"mtime":1609738143985,"results":"15","hashOfConfig":"11"},{"size":6563,"mtime":1609669110970,"results":"16","hashOfConfig":"11"},{"size":4932,"mtime":1609740121942,"results":"17","hashOfConfig":"11"},{"size":4547,"mtime":1609738079988,"results":"18","hashOfConfig":"11"},{"size":3341,"mtime":1609740185103,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1lv8pm5",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},"/Users/pleed0215/Documents/mystudy/nwitter/src/index.tsx",[],["45","46"],"/Users/pleed0215/Documents/mystudy/nwitter/src/components/App.tsx",[],"/Users/pleed0215/Documents/mystudy/nwitter/src/firebase.app.ts",[],"/Users/pleed0215/Documents/mystudy/nwitter/src/components/Router.tsx",["47","48","49"],"import React, { useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport { Auth } from \"../routes/auth\";\nimport { Home } from \"../routes/home\";\nimport firebase from \"firebase\";\nimport { AppNavigation } from \"./Navigation\";\nimport { Profile } from \"routes/profile\";\nimport { firebaseAuth } from \"firebase.app\";\nimport { IProfileText } from \"./App\";\n\ninterface IAppRouter {\n  isLoggedIn: Boolean;\n  profileText: IProfileText;\n  setProfileText: React.Dispatch<IProfileText>;\n}\n\nexport const AppRouter: React.FC<IAppRouter> = ({\n  isLoggedIn,\n  profileText,\n  setProfileText,\n}) => {\n  return (\n    <Router>\n      {isLoggedIn && (\n        <AppNavigation\n          displayName={profileText.displayName}\n          email={profileText.email}\n          photoUrl={profileText.photoUrl}\n        />\n      )}\n      {isLoggedIn ? (\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route exact path=\"/profile\">\n            <Profile\n              setProfileText={setProfileText}\n              profileText={profileText}\n            />\n          </Route>\n          <Redirect from=\"*\" to=\"/\" />\n        </Switch>\n      ) : (\n        <Switch>\n          <Route exact path-=\"/\">\n            <Auth />\n          </Route>\n        </Switch>\n      )}\n    </Router>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nwitter/src/components/Navigation.tsx",["50","51"],"import { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUserAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { firebaseAuth } from \"firebase.app\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface IProfileText {\n  displayName?: string | null;\n  email?: string | null;\n  photoUrl?: string | null;\n}\n\nexport const AppNavigation: React.FC<IProfileText> = ({\n  displayName,\n  email,\n  photoUrl,\n}) => {\n  return (\n    <nav className=\"w-full p-4 bg-blue-400 text-white text-2xl\">\n      <ul className=\"w-full flex justify-between\">\n        <li>\n          <Link to=\"/\">\n            <FontAwesomeIcon icon={faTwitter} />\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/profile\" className=\"flex items-center group\">\n            {photoUrl ? (\n              <div\n                className=\"w-8 h-8 rounded-full bg-cover bg-center mr-2\"\n                style={{ backgroundImage: `url(${photoUrl})` }}\n              ></div>\n            ) : (\n              <FontAwesomeIcon icon={faUserAlt} className=\"mr-2\" />\n            )}\n            <span className=\"text-sm group-hover:underline\">\n              {displayName}({email})\n            </span>\n          </Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nwitter/src/routes/auth.tsx",["52","53","54","55"],"import { faGithub, faGoogle } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { firebaseApp, firebaseAuth, firebaseInstance } from \"firebase.app\";\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\ninterface IAuthForm {\n  email: string;\n  password: string;\n  password2: string;\n}\n\nexport const Auth = () => {\n  const {\n    register,\n    formState,\n    handleSubmit,\n    getValues,\n    errors,\n  } = useForm<IAuthForm>({\n    mode: \"onBlur\",\n  });\n  const [isCreating, setIsCreating] = useState<Boolean>(false);\n  const [authError, setAuthError] = useState<string | null>(null);\n\n  const onSubmit = async () => {\n    const { email, password, password2 } = getValues();\n    try {\n      if (isCreating) {\n        if (password === password2) {\n          const data = await firebaseAuth.createUserWithEmailAndPassword(\n            email,\n            password\n          );\n        } else {\n          setAuthError(\"Please verify your password\");\n        }\n      } else {\n        const data = await firebaseAuth.signInWithEmailAndPassword(\n          email,\n          password\n        );\n      }\n    } catch (e) {\n      setAuthError(e.message);\n    }\n  };\n\n  const onSocialClick = async (event: any) => {\n    const {\n      target: { name },\n    } = event;\n\n    try {\n      let provider = null;\n      if (name === \"google\") {\n        provider = new firebaseInstance.auth.GoogleAuthProvider();\n      } else if (name === \"github\") {\n        provider = new firebaseInstance.auth.GithubAuthProvider();\n      }\n\n      if (provider) await firebaseAuth.signInWithPopup(provider);\n    } catch (error) {\n      setAuthError(error.message);\n    }\n  };\n\n  return (\n    <div className=\"w-full flex flex-col items-center\">\n      <div className=\"w-full max-w-screen-sm flex flex-col items-center mt-32\">\n        <div className=\"w-full h-16 text-2xl italic bg-gray-700 text-white flex items-center justify-center\">\n          {isCreating ? \"Create Account\" : \"Log in\"}\n        </div>\n        <form\n          className=\"w-full  flex flex-col py-6 px-4 border border-gray-200\"\n          method=\"post\"\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <div className=\"flex flex-col items-start w-full mb-4\">\n            <input\n              className=\"border border-gray-400 py-3 px-2 text-lg w-full outline-none\"\n              ref={register({\n                required: true,\n                pattern: {\n                  value: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\n                  message: \"Please write valid email address\",\n                },\n              })}\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Email\"\n              required\n            />\n            {errors.email && (\n              <span className=\"text-red-600 italic text-sm font-thin\">\n                {errors.email.message}\n              </span>\n            )}\n          </div>\n          <div className=\"flex flex-col items-start w-full mb-4\">\n            <input\n              className=\"border border-gray-400 py-3 px-2 text-lg w-full outline-none\"\n              ref={register({\n                required: true,\n\n                minLength: {\n                  value: 8,\n                  message: \"Password must be longer than 8 length.\",\n                },\n                maxLength: {\n                  value: 16,\n                  message: \"Password must be shorter than 16 length.\",\n                },\n              })}\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              required\n            />\n            {errors.password && (\n              <span className=\"text-red-600 italic text-sm font-thin\">\n                {errors.password.message}\n              </span>\n            )}\n          </div>\n          {isCreating && (\n            <div className=\"flex flex-col items-start w-full mb-4\">\n              <input\n                className=\"border border-gray-400 py-3 px-2 text-lg w-full outline-none\"\n                ref={register({\n                  required: true,\n                  minLength: {\n                    value: 8,\n                    message: \"Password must be longer than 8 length.\",\n                  },\n                  maxLength: {\n                    value: 16,\n                    message: \"Password must be shorter than 16 length.\",\n                  },\n                })}\n                type=\"password\"\n                name=\"password2\"\n                placeholder=\"Verify password\"\n                required\n              />\n              {errors.password2 && (\n                <span className=\"text-red-600 italic text-sm font-thin\">\n                  {errors.password2.message}\n                </span>\n              )}\n            </div>\n          )}\n          {authError && (\n            <div className=\"w-full text-red-600 mb-4\">\n              <span>{authError}</span>\n            </div>\n          )}\n          <button className=\"mx-auto w-1/2 text-center text-xl py-5 bg-blue-200 text-blue-400 hover:bg-blue-600 hover:text-blue-200 transition duration-200\">\n            {isCreating ? \"Create Account\" : \"Log in\"}\n          </button>\n        </form>\n        <div className=\"w-full py-4 flex justify-around\">\n          <button\n            onClick={onSocialClick}\n            name=\"google\"\n            className=\"py-4 text-center text-xl bg-red-600 text-white px-4 hover:bg-red-400 transition duration-200\"\n          >\n            <FontAwesomeIcon\n              className=\"mr-2 border border-white rounded-full p-1 text-2xl\"\n              icon={faGoogle}\n            />\n            Continue with Google\n          </button>\n          <button\n            onClick={onSocialClick}\n            name=\"github\"\n            className=\"py-4 text-center text-xl bg-gray-800 text-white px-4 hover:bg-gray-600 transition duration-200\"\n          >\n            <FontAwesomeIcon icon={faGithub} className=\"mr-2\" />\n            Continue with Github\n          </button>\n        </div>\n        <div className=\"text-xl\">\n          <p>\n            {isCreating\n              ? \"You already have account? Then, \"\n              : \"Don't you have any account? Then, \"}\n            <span\n              className=\" cursor-pointer text-blue-500 hover:font-bold\"\n              onClick={() => setIsCreating(!isCreating)}\n            >\n              {isCreating ? \"Log in\" : \"Create account.\"}\n            </span>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nwitter/src/routes/home.tsx",["56","57","58"],"import { Nweet } from \"components/Nweet\";\nimport { firebaseAuth, firebaseFS, firebaseStorage } from \"firebase.app\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface IMessageForm {\n  message: string;\n  files: File[];\n}\n\nexport interface INweet {\n  id: string;\n  creatorId: string;\n  nweet: string;\n  createdAt: Date;\n  imageUrl?: string | null;\n}\n\nexport const Home = () => {\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    errors,\n    reset,\n  } = useForm<IMessageForm>();\n  const [nweets, setNweets] = useState<INweet[]>([]);\n  const [imageData, setImageData] = useState<string | null>(null);\n\n  const onSubmit = async () => {\n    const { message, files } = getValues();\n\n    let fileName = null;\n\n    if (imageData) {\n      fileName = uuidv4();\n      const fileRef = firebaseStorage\n        .ref()\n        .child(`${firebaseAuth.currentUser?.uid}/${fileName}`);\n      await fileRef.putString(imageData, \"data_url\");\n    }\n\n    await firebaseFS.collection(\"nweets\").add({\n      nweet: message,\n      creatorId: firebaseAuth.currentUser?.uid,\n      createdAt: Date.now(),\n      imageUrl: fileName,\n    });\n\n    reset();\n    setImageData(null);\n  };\n\n  const onFileChange = () => {\n    const { files } = getValues();\n    const file = files[0];\n\n    const reader = new FileReader();\n    // @ts-ignore\n    reader.onloadend = (ev) => setImageData(ev.currentTarget.result);\n    reader.readAsDataURL(file);\n  };\n\n  const getNweets = async () => {\n    setNweets([]);\n    const nweetsFromFS = await firebaseFS\n      .collection(\"nweets\")\n      .orderBy(\"createdAt\", \"asc\")\n      .get();\n    nweetsFromFS.forEach((document) => {\n      const { nweet, createdAt, creatorId, id, imageUrl } = document.data();\n      setNweets((prev) => [\n        { nweet, createdAt, creatorId, id, imageUrl },\n        ...prev,\n      ]);\n    });\n  };\n\n  useEffect(() => {\n    firebaseFS\n      .collection(\"nweets\")\n      //.where(\"creatorId\", \"==\", firebaseAuth.currentUser?.uid)\n      .orderBy(\"createdAt\", \"asc\")\n      .onSnapshot((snapshot) => {\n        snapshot.docChanges().forEach((change) => {\n          if (change.type === \"added\") {\n            const { creatorId, nweet, createdAt, imageUrl } = change.doc.data();\n            setNweets((prev) => [\n              { id: change.doc.id, creatorId, nweet, createdAt, imageUrl },\n              ...prev,\n            ]);\n          }\n          if (change.type === \"removed\") {\n            setNweets((prev) =>\n              prev.filter((nweet) => nweet.id !== change.doc.id)\n            );\n          }\n          if (change.type === \"modified\") {\n            setNweets((prev) => {\n              const index = prev.findIndex((nweet) => {\n                return nweet.id === change.doc.id;\n              });\n              if (index > -1) {\n                const { nweet } = change.doc.data();\n                prev[index] = { ...prev[index], nweet };\n              }\n\n              return [...prev];\n            });\n          }\n        });\n      });\n  }, []);\n\n  return (\n    <div className=\"w-full flex flex-col max-h-screen overflow-y-scroll\">\n      <div className=\"w-full max-w-screen-sm flex flex-col items-start mt-4 mb-4\">\n        <div className=\"p-1 w-32 h-32 border border-gray-400 self-center mb-2 flex justify-center items-center\">\n          {imageData && (\n            <img className=\"w-full h-full\" src={imageData} alt=\"from user\" />\n          )}\n        </div>\n        <form\n          className=\"w-full flex flex-col px-2\"\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <div className=\"flex flex-col items-start w-full mr-2 mb-2\">\n            <input\n              className=\"border border-gray-400 py-3 px-2 text-lg w-full outline-none\"\n              ref={register()}\n              name=\"files\"\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={onFileChange}\n            />\n          </div>\n          <div className=\"w-full flex\">\n            <div className=\"flex flex-col items-start w-full mr-2\">\n              <input\n                className=\"border border-gray-400 py-3 px-2 text-lg w-full outline-none\"\n                ref={register()}\n                name=\"message\"\n                type=\"text\"\n                placeholder=\"What's on your mind?\"\n              />\n            </div>\n            <button className=\"mx-auto text-center text-sm px-2 bg-blue-200 text-blue-400 hover:bg-blue-600 hover:text-blue-200 transition duration-200\">\n              Nweet\n            </button>\n          </div>\n        </form>\n        <div className=\"mt-4 px-2 w-full\">\n          {nweets?.length > 0 ? (\n            <div>\n              {nweets.map((nweet) => (\n                <Nweet key={nweet.id} {...nweet} />\n              ))}\n            </div>\n          ) : (\n            <div>No Message</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nwitter/src/routes/profile.tsx",["59"],"import { firebaseAuth, firebaseStorage } from \"firebase.app\";\nimport React, { useRef, useState } from \"react\";\nimport { IProfileText } from \"components/App\";\nimport { PreviousMap } from \"postcss\";\n\ninterface IProfile {\n  setProfileText: React.Dispatch<IProfileText>;\n  profileText: IProfileText;\n}\n\nexport const Profile: React.FC<IProfile> = ({\n  setProfileText,\n  profileText,\n}) => {\n  const [isEditing, setIsEditing] = useState<Boolean>(false);\n  const [inputName, setInputName] = useState<string>(\"\");\n\n  const fileRef = useRef<HTMLInputElement>(null);\n  const onLogOutClick = () => firebaseAuth.signOut();\n  const onNameChangeClick = () => {\n    setIsEditing(true);\n    if (profileText && profileText.displayName)\n      setInputName(profileText?.displayName);\n  };\n  const onNameChangeDone = async () => {\n    if (\n      inputName &&\n      Boolean(inputName) &&\n      inputName !== profileText.displayName\n    ) {\n      setProfileText({\n        displayName: inputName,\n        email: profileText.email,\n      });\n      await firebaseAuth?.currentUser?.updateProfile({\n        displayName: inputName,\n        photoURL: firebaseAuth.currentUser.photoURL,\n      });\n    }\n    setIsEditing(false);\n  };\n\n  const onPhotoChange = () => {\n    if (fileRef.current && fileRef.current.files) {\n      const file: File = fileRef?.current?.files[0];\n      const fileReader = new FileReader();\n      let imageData = null;\n      fileReader.readAsDataURL(file);\n      fileReader.onloadend = async (ev) => {\n        imageData = ev.target?.result;\n        if (typeof imageData === \"string\") {\n          if (imageData) {\n            const uploadTask = await firebaseStorage\n              .ref()\n              .child(`${firebaseAuth.currentUser?.uid}/profile`)\n              .putString(imageData, \"data_url\");\n            const photoURL: string = await uploadTask.ref.getDownloadURL();\n            firebaseAuth.currentUser?.updateProfile({\n              photoURL,\n            });\n            setProfileText({ ...profileText, photoUrl: photoURL });\n          }\n        }\n      };\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col w-full mt-4 p-2\">\n      <div className=\"flex flex-col justify-center items-center w-full\">\n        <button\n          className=\"w-full py-3 bg-blue-400 text-white hover:bg-blue-600 transition duration-200 mb-4\"\n          onClick={onLogOutClick}\n        >\n          Logout\n        </button>\n        <div\n          className=\"border bg-cover bg-center w-32 h-32 rounded-full  border-gray-400\"\n          style={{\n            backgroundImage: `url(${profileText.photoUrl})`,\n          }}\n        ></div>\n        <input\n          name=\"files\"\n          type=\"file\"\n          accept=\"image/*\"\n          className=\"hidden\"\n          ref={fileRef}\n          onChange={onPhotoChange}\n        />\n\n        <button\n          onClick={() => fileRef.current?.click()}\n          className=\"mt-2 bg-blue-400 text-white hover:bg-blue-600 px-2 py-3 transition duration-200\"\n        >\n          Change Photo\n        </button>\n      </div>\n      <div className=\"border mt-10 flex flex-col p-4 relative items-center\">\n        <div className=\"absolute -top-4 py-2 px-2 bg-indigo-400 text-white rounded-lg\">\n          Profile\n        </div>\n        <div className=\"w-full flex flex-col items-start justify-start mt-4\">\n          <div className=\"w-full flex items-center py-3\">\n            {isEditing ? (\n              <>\n                <input\n                  type=\"text\"\n                  className=\"w-full p-2 outline-none border border-gray-200 mr-3\"\n                  name=\"inputName\"\n                  value={inputName}\n                  onChange={(e) => setInputName(e.target.value)}\n                />\n                <button\n                  onClick={onNameChangeDone}\n                  className=\"bg-blue-400 text-white hover:bg-blue-600 px-2 py-2\"\n                >\n                  Done\n                </button>\n              </>\n            ) : (\n              <>\n                <span className=\"w-full\">\n                  Display Name: {profileText.displayName}\n                </span>\n                <button\n                  onClick={onNameChangeClick}\n                  className=\"bg-blue-400 text-white hover:bg-blue-600 px-2 py-2\"\n                >\n                  Change\n                </button>\n              </>\n            )}\n          </div>\n          <div className=\"w-full flex items-center py-3\">\n            <span>Email: {profileText.email}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/pleed0215/Documents/mystudy/nwitter/src/components/Nweet.tsx",["60","61","62"],"import { faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { firebaseAuth, firebaseFS, firebaseStorage } from \"firebase.app\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport { INweet } from \"routes/home\";\n\ninterface INweetComponent extends INweet {}\n\ninterface IEdit {\n  text: string;\n}\n\nexport const Nweet: React.FC<INweetComponent> = ({\n  id,\n  creatorId,\n  createdAt,\n  nweet,\n  imageUrl,\n}) => {\n  const { register, getValues, setValue, watch } = useForm<IEdit>();\n  const [isEditing, setIsEditing] = useState<Boolean>(false);\n  const [editText, setEditText] = useState<string>(nweet);\n  const [imagePath, setImagePath] = useState<string | null>(null);\n\n  const getImageUrl = async () => {\n    if (imageUrl) {\n      setImagePath(\n        await firebaseStorage\n          .ref()\n          .child(`${creatorId}/${imageUrl}`)\n          .getDownloadURL()\n      );\n    } else {\n      setImagePath(\"/noimage.png\");\n    }\n  };\n\n  useEffect(() => {\n    getImageUrl();\n  }, []);\n\n  const onDeleteClick = async (id: string) => {\n    const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\n    if (ok) {\n      if (imageUrl) {\n        await firebaseStorage\n          .ref()\n          .child(`${firebaseAuth.currentUser?.uid}/${imageUrl}`)\n          .delete();\n      }\n\n      await firebaseFS.collection(\"nweets\").doc(id).delete();\n    }\n  };\n\n  const onEditDone = async (id: string) => {\n    const { text } = getValues();\n    await firebaseFS.collection(\"nweets\").doc(id).update({\n      nweet: text,\n    });\n    setIsEditing(false);\n  };\n\n  const onEditStart = () => {\n    setEditText(nweet);\n    setIsEditing(true);\n  };\n\n  return (\n    <div className=\"w-full flex flex-start items-center py-2\">\n      {isEditing ? (\n        <input\n          ref={register()}\n          placeholder=\"Write yours\"\n          className=\"w-full p-1 border border-gray-500 outline-none\"\n          value={editText}\n          onChange={(e) => setEditText(e.target.value)}\n          name=\"text\"\n          type=\"text\"\n        />\n      ) : (\n        <div className=\"flex items-center w-full border border-gray-400\">\n          <div className=\" border-r  border-gray-400  h-28 w-32 mr-2 p-1 flex justify-center items-center\">\n            {imagePath ? (\n              <img className=\"w-full h-full\" src={imagePath} alt={`${nweet}`} />\n            ) : (\n              <></>\n            )}\n          </div>\n          <div className=\"w-full\">{nweet}</div>\n        </div>\n      )}\n      <div className=\"w-20 flex \">\n        {firebaseAuth?.currentUser?.uid === creatorId &&\n          (isEditing ? (\n            <button\n              className=\"ml-2 w-full p-1 text-center bg-blue-400 text-white hover:bg-blue-600 transition duration-200\"\n              onClick={() => onEditDone(id)}\n            >\n              Done\n            </button>\n          ) : (\n            <>\n              <button className=\"mr-2 w-10\" onClick={() => onDeleteClick(id)}>\n                <FontAwesomeIcon icon={faTrash} />\n              </button>\n              <button className=\"w-10\" onClick={() => onEditStart()}>\n                <FontAwesomeIcon icon={faEdit} />\n              </button>\n            </>\n          ))}\n      </div>\n    </div>\n  );\n};\n",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":25},{"ruleId":"67","severity":1,"message":"71","line":10,"column":8,"nodeType":"69","messageId":"70","endLine":10,"endColumn":16},{"ruleId":"67","severity":1,"message":"72","line":13,"column":10,"nodeType":"69","messageId":"70","endLine":13,"endColumn":22},{"ruleId":"67","severity":1,"message":"72","line":4,"column":10,"nodeType":"69","messageId":"70","endLine":4,"endColumn":22},{"ruleId":"67","severity":1,"message":"68","line":5,"column":17,"nodeType":"69","messageId":"70","endLine":5,"endColumn":25},{"ruleId":"67","severity":1,"message":"73","line":3,"column":10,"nodeType":"69","messageId":"70","endLine":3,"endColumn":21},{"ruleId":"67","severity":1,"message":"74","line":16,"column":5,"nodeType":"69","messageId":"70","endLine":16,"endColumn":14},{"ruleId":"67","severity":1,"message":"75","line":31,"column":17,"nodeType":"69","messageId":"70","endLine":31,"endColumn":21},{"ruleId":"67","severity":1,"message":"75","line":39,"column":15,"nodeType":"69","messageId":"70","endLine":39,"endColumn":19},{"ruleId":"67","severity":1,"message":"76","line":25,"column":5,"nodeType":"69","messageId":"70","endLine":25,"endColumn":11},{"ruleId":"67","severity":1,"message":"77","line":32,"column":22,"nodeType":"69","messageId":"70","endLine":32,"endColumn":27},{"ruleId":"67","severity":1,"message":"78","line":65,"column":9,"nodeType":"69","messageId":"70","endLine":65,"endColumn":18},{"ruleId":"67","severity":1,"message":"79","line":4,"column":10,"nodeType":"69","messageId":"70","endLine":4,"endColumn":21},{"ruleId":"67","severity":1,"message":"80","line":22,"column":32,"nodeType":"69","messageId":"70","endLine":22,"endColumn":40},{"ruleId":"67","severity":1,"message":"81","line":22,"column":42,"nodeType":"69","messageId":"70","endLine":22,"endColumn":47},{"ruleId":"82","severity":1,"message":"83","line":42,"column":6,"nodeType":"84","endLine":42,"endColumn":8,"suggestions":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'firebase' is defined but never used.","'firebaseAuth' is defined but never used.","'firebaseApp' is defined but never used.","'formState' is assigned a value but never used.","'data' is assigned a value but never used.","'errors' is assigned a value but never used.","'files' is assigned a value but never used.","'getNweets' is assigned a value but never used.","'PreviousMap' is defined but never used.","'setValue' is assigned a value but never used.","'watch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getImageUrl'. Either include it or remove the dependency array.","ArrayExpression",["88"],"no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},"Update the dependencies array to be: [getImageUrl]",{"range":"91","text":"92"},[1106,1108],"[getImageUrl]"]